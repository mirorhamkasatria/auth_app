// Code generated by mockery v1.0.0.

package repositories

import (
	"errors"
	"reflect"
	"testing"

	models "github.com/auth_app/app/models"
	mock "github.com/stretchr/testify/mock"
	"gorm.io/gorm"
)

type MockDB interface {
	Create(value interface{}) *gorm.DB
	Error() error
}

func TestMockRepoUser_GetUsersByFilters(t *testing.T) {
	type fields struct {
		Mock mock.Mock
	}
	type args struct {
		filter *models.User
	}
	tests := []struct {
		name    string
		fields  fields
		args    args
		want    *[]models.User
		wantErr bool
	}{
		{
			name: "Valid email filter",
			fields: fields{
				Mock: mock.Mock{},
			},
			args: args{
				filter: &models.User{Email: "johndoe@example.com"},
			},
			want:    &[]models.User{{ID: 1, FirstName: "John", LastName: "Doe", Email: "johndoe@example.com"}},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			// Set up expectations for the method call
			tt.fields.Mock.On("GetUsersByFilters", tt.args.filter).Return(tt.want, nil)

			_m := &MockRepoUser{
				Mock: tt.fields.Mock,
			}
			got, err := _m.GetUsersByFilters(tt.args.filter)

			// Assert the expectations
			tt.fields.Mock.AssertExpectations(t)

			if (err != nil) != tt.wantErr {
				t.Errorf("MockRepoUser.GetUsersByFilters() error = %v, wantErr %v", err, tt.wantErr)
				return
			}

			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("MockRepoUser.GetUsersByFilters() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestMockRepoUser_InsertUser(t *testing.T) {
	mockDB := new(mock.Mock)

	type fields struct {
		Mock *mock.Mock
	}
	type args struct {
		data *models.User
	}

	tests := []struct {
		name    string
		fields  fields
		args    args
		want    *int
		wantErr bool
	}{
		{
			name:   "Insert successful",
			fields: fields{Mock: mockDB},
			args:   args{data: &models.User{FirstName: "John", LastName: "Doe", Email: "johndoe@example.com", Password: "password"}},
			want: (func() *int {
				temp := 1
				return &temp
			}()),
			wantErr: false,
		},
		{
			name:    "Invalid email",
			fields:  fields{Mock: mockDB},
			args:    args{data: &models.User{FirstName: "Jane", LastName: "Smith", Email: "", Password: "password"}},
			want:    nil,
			wantErr: true,
		},
		{
			name:    "Long first name",
			fields:  fields{Mock: mockDB},
			args:    args{data: &models.User{FirstName: string(make([]byte, 556)), LastName: "Doe", Email: "johndoe@example.com", Password: "password"}},
			want:    nil,
			wantErr: true,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			setupInsertUserExpectation(tt.fields.Mock, tt.args.data, tt.want, tt.wantErr)
			_m := &MockRepoUser{
				Mock: *mockDB,
			}

			got, err := _m.InsertUser(tt.args.data)
			tt.fields.Mock.AssertExpectations(t)
			if (err != nil) != tt.wantErr {
				t.Errorf("MockRepoUser.InsertUser() error = %v, wantErr %v", err, tt.wantErr)
				return
			}

			if tt.want != nil && got != tt.want {
				t.Errorf("MockRepoUser.InsertUser() = %v, want %v", got, tt.want)
			}
		})
	}
}

func setupInsertUserExpectation(mock *mock.Mock, data *models.User, want *int, wantErr bool) {
	if wantErr {
		mock.On("InsertUser", data).Return(want, errors.New("expected error"))
	} else {
		mock.On("InsertUser", data).Return(want, nil)
	}
}

func setupGetUsersByFiltersExpectation(mock *mock.Mock, want *[]models.User, wantErr bool) {
	if wantErr {
		mock.On("GetUsersByFilters").Return(nil, errors.New("expected error"))
	} else {
		mock.On("GetUsersByFilters").Return(want, nil)
	}
}
