// Code generated by mockery v1.0.0

package services

import (
	"errors"
	"reflect"
	"testing"

	models "github.com/auth_app/app/models"
	mock "github.com/stretchr/testify/mock"
)

func TestMockServiceUser_Login(t *testing.T) {
	type fields struct {
		Mock mock.Mock
	}
	type args struct {
		user *models.User
	}
	tests := []struct {
		name    string
		fields  fields
		args    args
		want    *string
		wantErr bool
	}{
		{
			name: "Successful login",
			fields: fields{
				Mock: mock.Mock{},
			},
			args: args{
				user: &models.User{Email: "johndoe@example.com", Password: "password"},
			},
			want:    ptrString("login_token"),
			wantErr: false,
		},
		{
			name: "Unsuccessful login",
			fields: fields{
				Mock: mock.Mock{},
			},
			args: args{
				user: &models.User{Email: "invalid@example.com", Password: "wrongpassword"},
			},
			want:    nil,
			wantErr: true,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			// Set up expectations for the method call
			setupLoginExpectation(&tt.fields.Mock, tt.args.user, tt.wantErr)

			_m := &MockServiceUser{
				Mock: tt.fields.Mock,
			}
			got, err := _m.Login(tt.args.user)

			// Assert the expectations
			tt.fields.Mock.AssertExpectations(t)

			if (err != nil) != tt.wantErr {
				t.Errorf("MockServiceUser.Login() error = %v, wantErr %v", err, tt.wantErr)
				return
			}

			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("MockServiceUser.Login() = %v, want %v", got, tt.want)
			}
		})
	}
}

// Helper function to create a pointer to a string
func ptrString(s string) *string {
	return &s
}
func TestMockServiceUser_RegisterUser(t *testing.T) {
	type fields struct {
		Mock mock.Mock
	}
	type args struct {
		user *models.User
	}
	tests := []struct {
		name    string
		fields  fields
		args    args
		want    *string
		wantErr bool
	}{
		{
			name: "Successful registration",
			fields: fields{
				Mock: mock.Mock{},
			},
			args: args{
				user: &models.User{FirstName: "John", LastName: "Doe", Email: "john.doe@example.com", Password: "password"},
			},
			want:    ptrString("registration_token"),
			wantErr: false,
		},
		{
			name: "Invalid email during registration",
			fields: fields{
				Mock: mock.Mock{},
			},
			args: args{
				user: &models.User{FirstName: "Jane", LastName: "Smith", Email: "invalidemail", Password: "password"},
			},
			want:    nil,
			wantErr: true,
		},
		// Add more test cases as needed
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			// Set up expectations for the method call
			setupRegisterUserExpectation(&tt.fields.Mock, tt.args.user, tt.wantErr)

			_m := &MockServiceUser{
				Mock: tt.fields.Mock,
			}
			got, err := _m.RegisterUser(tt.args.user)

			// Assert the expectations
			tt.fields.Mock.AssertExpectations(t)

			if (err != nil) != tt.wantErr {
				t.Errorf("MockServiceUser.RegisterUser() error = %v, wantErr %v", err, tt.wantErr)
				return
			}

			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("MockServiceUser.RegisterUser() = %v, want %v", got, tt.want)
			}
		})
	}
}

// Helper function to set up expectations for RegisterUser method
func setupRegisterUserExpectation(mock *mock.Mock, user *models.User, wantErr bool) {
	if wantErr {
		mock.On("RegisterUser", user).Return(nil, errors.New("expected error"))
	} else {
		mock.On("RegisterUser", user).Return(ptrString("registration_token"), nil)
	}
}

func setupLoginExpectation(mock *mock.Mock, user *models.User, wantErr bool) {
	if wantErr {
		mock.On("Login", user).Return(nil, errors.New("expected error"))
	} else {
		mock.On("Login", user).Return(ptrString("login_token"), nil)
	}
}
